name: Auto Go Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    outputs:
      tag: ${{ steps.get_version.outputs.next_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Get latest release tag
        id: get_version
        run: |
          latest=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "")
          if [ -z "$latest" ]; then
            echo "v1.0.0" > VERSION
          else
            IFS='.' read -r major minor patch <<<"${latest#v}"
            patch=$((patch+1))
            echo "v${major}.${minor}.${patch}" > VERSION
          fi
          echo "next_tag=$(cat VERSION)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Go binary (${{ matrix.goos }}/${{ matrix.goarch }})
        run: |
          mkdir -p build
          bin_name="gfc"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            bin_name="gfc.exe"
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o build/${bin_name} ./...

          cd build
          archive_name="gfc-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${archive_name}.zip" "${bin_name}"
          else
            tar -czf "${archive_name}.tar.gz" "${bin_name}"
          fi
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/*

  publish:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --tags
          git tag ${{ needs.release.outputs.tag }}
          git push origin ${{ needs.release.outputs.tag }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: build

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          name: Release ${{ needs.release.outputs.tag }}
          files: build/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
